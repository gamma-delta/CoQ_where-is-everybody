using System;
using System.Linq;
using ConsoleLib.Console;
using HistoryKit;
using Qud.API;
using XRL.Language;
using XRL.UI;
using static XRL.World.Conversations.Parts.WaterRitual;

namespace XRL.World.Conversations.Parts
{
    public class WaterRitualBuySecret : IWaterRitualSecretPart
    {
        public override bool Available => Record.secretsRemaining > 0;
        public override bool Filter(IBaseJournalEntry Entry) => RecordFaction.WantsToSellSecret(Entry);

        public override void Awake()
        {
            base.Awake();
            Reputation = GetWaterRitualCostEvent.GetFor(The.Player, The.Speaker, "Secret", REP_SECRET);
        }

        public void Share()
        {
            var rng = new Random(Record.mySeed);
            GetShuffledSecrets(rng, out var notes, out _);
            RevealEntry(notes.GetRandomElement(rng));
        }

        public void RevealEntry(IBaseJournalEntry entry)
        {
            var reveal = true;
            entry.attributes.Add(RecordFaction.NoBuySecretString);
            Record.secretsRemaining--;
            
            switch (entry)
            {
                case JournalSultanNote sultan:
                    var ev = HistoryAPI.GetEvent(sultan.eventId);
                    Popup.Show(The.Speaker.Does("share", Stripped: true) + " an event from the life of a sultan with you.\n\n\"" + ev.GetEventProperty("gospel") + "\"");
                    ev.Reveal();
                    reveal = false;
                    break;
                case JournalMapNote map:
                    Popup.Show(The.Speaker.Does("share", Stripped: true) + " the location of " + Markup.Wrap(Grammar.LowerArticles(map.text)) + ".");
                    break;
                case JournalObservation observation:
                {
                    var displayText = The.Speaker.Does("share", Stripped: true) + " some gossip with you.";
                    if (entry.Has("gossip"))
                    {
                        displayText += "\n\n\"";
                        var leadIn = HistoricStringExpander.ExpandString("<spice.gossip.leadIns.!random>", null, The.Game.sultanHistory);
                        if (leadIn.Contains('?') || leadIn.Contains('.') || observation.initCapAsFragment) displayText += leadIn + " " + observation.text;
                        else displayText += leadIn + " " + Grammar.InitLower(observation.text);
                        displayText += "\"";
                    }

                    Popup.Show(displayText);
                    break;
                }
                case JournalRecipeNote recipe:
                    // TODO:Cooking
                    Popup.Show(The.Speaker.Does("share", Stripped: true) + " a recipe with you.");
                    break;
            }

            if (RecordFaction.Visible)
            {
                entry.AppendHistory(" {{K|-learned from " + RecordFaction.getFormattedName() + "}}");
            }

            if (reveal || !entry._revealed) entry.Reveal();
            entry.Updated();
        }

        public override bool WantEvent(int ID, int Propagation)
        {
            return base.WantEvent(ID, Propagation)
                   || ID == GetChoiceTagEvent.ID
                   || ID == EnteredElementEvent.ID
                ;
        }
        
        public override bool HandleEvent(EnteredElementEvent E)
        {
            if (Record.secretsRemaining <= 0)
            {
                Popup.ShowFail(The.Speaker.T(Stripped: true) + " has no more secrets to share.");
            }
            else if (UseReputation())
            {
                Share();
            }

            return base.HandleEvent(E);
        }
        
        public override bool HandleEvent(GetChoiceTagEvent E)
        {
            E.Tag = "{{" + Lowlight + "|[{{" + Numeric + "|" + GetReputationCost() + "}} reputation]}}";
            return false;
        }
    }
}
